manifest {
    name = "cerebro"
    author = "@esteinig"
    defaultBranch = "main"
    homePage = 'https://github.com/esteinig/cerebro'
    description = 'Clinical metagenomic diagnostics pipeline'
    mainScript = 'main.nf'
    version = '0.8.0'
    nextflowVersion = '>=24.04'
}


params {

  fastqPaired                         = null                                  // glob string
  fastqNanopore                       = null                                  // glob string

  sampleSheet                         = null                                  // production sample sheet
  sampleSheetProduction               = false                                 // TODO: run_id, run_date, host columns required

  executionDirectory                  = "."                                   // cerebro-tower execution directory 
  stageDirectory                      = "$params.executionDirectory/stage"    // cerebro-tower json staged sample 

  outputDirectory                     = "$params.executionDirectory/output"   // output directory
  databaseDirectory                   = "db"                                  // db base directory


  monochrome                          = false

  cerebroProduction {
    
    apiToken                          = "CEREBRO_API_TOKEN"
    teamName                          = "CEREBRO_TEAM_NAME"
    towerIdentifier                   = "CEREBRO_TOWER_ID"
    
  }

  cerebroConfig {
    
    cipherTaxonomy                        = "$params.databaseDirectory"       // ncbi nodes format

    qualityControlBackgroundOnly          = false
    qualityControlDeduplicateBefore       = true
    qualityControlInternalControlsBefore  = true
    
    profileAlignmentSpeciesLca            = true
    ncbiDatabaseSpeciesLca                = true
    
  }

  qualityControl {    
      
      readQuality                     = true
      readQualityMethod               = "fastp"  // fastp nanoq
      
      readDeduplication               = true
      readDeduplicationHead           = 75
      readDeduplicationDeterministic  = false
    
      adapterForward                  = null
      adapterReverse                  = null
    
      syntheticControls               = true
      syntheticControlsAligner        = "minimap2" // bowtie2 minimap2 minigraph strobealign
      syntheticControlsIndex          = "$params.databaseDirectory/ercc.fasta"
      syntheticControlsReference      = "$params.databaseDirectory/ercc.fasta"
    
      hostDepletion                   = true
      hostDepletionAligner            = "bowtie2"
      hostDepletionIndex              = "$params.databaseDirectory/chm13v2"
    
      internalControls                = true
      internalControlsAligner         = "minimap2"
      internalControlsIndex           = "$params.databaseDirectory/controls.fasta"
      internalControlsReference       = "$params.databaseDirectory/controls.fasta"
      
      backgroundDepletion             = false
      backgroundDepletionAligner      = "minimap2"
      backgroundDepletionIndex        = "$params.databaseDirectory/background.fasta"
      backgroundDepletionReference    = "$params.databaseDirectory/background.fasta"

  }


  pathogenDetection {

    taxonomicProfile {

      enabled                         = true

      alignment                       = true
      alignmentMethod                 = "bowtie2"
      alignmentIndex                  = "$params.databaseDirectory/lod"
      alignmentReference              = "$params.databaseDirectory/lod.fasta"
      alignmentSecondary              = false
      alignmentRemapThreads           = 2
      alignmentRemapParallel          = 4

      classifier                      = false
      classifierMethod                = "kraken2 metabuli"
      classifierMetabuliIndex         = "$params.databaseDirectory/virus.metabuli"
      classifierKrakenIndex           = "$params.databaseDirectory/virus.kraken2"
      classifierKrakenConfidence      = 0.1

      relativeAbundanceCorrection     = false
      relativeAbundanceGenomeLength   = "$params.databaseDirectory/genome_lengths.tsv.xz"

      profiler                        = false
      profilerMethod                  = "bracken sylph kmcp"
      profilerBrackenReadLength       = 150
      profilerBrackenRank             = "S"
      profilerBrackenMinReads         = 3
      profilerSylphIndex              = "$params.databaseDirectory/virus.syldb"
      profilerSylphMetadata           = "$params.databaseDirectory/virus.sylph.metadata.tsv.gz"
      profilerKmcpIndex               = "$params.databaseDirectory/virus.kmcp"
      profilerKmcpMode                = 0  // pathogen detection
      
    }

    metagenomeAssembly {              // low abundance configuration for csf

      enabled                         = false

      assemblyMethod                  = "metaspades megahit"
      assemblyArgs                    = ""
      assemblyKmerList                = "21,29,39,59,79,99,119,127"
      assemblyMinContigLength         = 200

      binningMethod                   = "concoct metabat2"     
      binningChunkSize                = 10000   // concoct
      binningReadLength               = 150     // concoct
      binningMinContigLength          = 1500    // concoct / metabat2
      binningMinBinSize               = 5000    // concoct / metabat2

      ncbiDatabase                    = false
      ncbiDatabaseIndex               = "$params.databaseDirectory/nt_nr"
      ncbiDatabaseMethod              = "blast diamond"

      contigProfile                   = false
      contigProfileMethod             = "blast"
      contigProfileIndex              = "$params.databaseDirectory/virus.db"

      virusDetection                  = false
      virusDetectionMethod            = "genomad"
      virusDetectionMinContigLength   = 2000
      virusDetectionIndex             = "$params.databaseDirectory/genomad_db"

      virusContigPolish               = false
      virusContigPolishMethod         = "cobra"

      virusProfile                    = false
      virusProfileMethod              = "minimap2"
      virusProfileIndex               = "$params.databaseDirectory/img_vr.fasta.xz"
      virusProfileReference           = "$params.databaseDirectory/img_vr.fasta.xz"

      rdrpDetection                   = false
      rdrpDetectionMethod             = "rdrp-scan"
      rdrpLibraryTag                  = "RNA"
      rdrpDetectionIndex              = "$params.databaseDirectory/rdrp_db"

      remapThreads                    = 2
      remapParallel                   = 4

    }

    hostGenome {

      aneuploidyDetection            = true
      aneuploidyReferenceMethod      = "cnvkit"
      aneuploidyLibraryTag           = "DNA HOST"

      aneuploidyAligner              = "minimap2"
      aneuploidyIndex                = "$params.databaseDirectory/chm13v2.mmi"
      aneuploidyReferenceAlignment   = "$params.databaseDirectory/aneuploidy.bam"

      signatureBacterialViral        = true
      signatureLibraryTag            = "RNA HOST"
      signatureReferences            = "two_gene_signature.fasta"
      
    }

  }

  panviralEnrichment {            

    virusAligner                      = "minimap2"
    virusIndex                        = "$params.databaseDirectory/virus.fasta"
    virusReference                    = "$params.databaseDirectory/virus.fasta"

    remapThreads                      = 2
    remapParallel                     = 4

  }

  bacterialEnrichment {            

    panelAligner                      = "minimap2"
    panelIndex                        = "$params.databaseDirectory/ngono_amr.fasta"
    panelExtraction                   = true  // extract aligned reads from background before further processing

    assembly                          = true
    assemblyMethod                    = "shovill-skesa"
    assemblyChecks                    = "checkm2"
    
    assemblyAnnotation                = true
    assemblyAnnotationMethod          = "bakta"
    
    assemblyMlst                      = true 
    assemblyMlstMethod                = "mlst"

    assemblyAmr                       = true
    assemblyAmrMethod                 = "ng-star abrit-amr"
    assemblyAmrIndex                  = "$params.databaseDirectory/ngono_ngstar.fasta"
    assemblyAmrSpecies                = "Neisseria gonorrhea"

    assemblyMgeContig                 = true
    assemblyMgeScan                   = true
    assemblyMgeScanWindow             = 2000
    assemblyMgeMethod                 = "genomad"
    assemblyGenomadDatabase           = "$params.databaseDirectory/genomad_db"

  }

  cultureIdentification {

    speciesTyping  {

      genomeAssembly                  = true  
      hybridAssembly                  = true         
      genomeAssembler                 = "hybracter"  // dragonflye, hybracter, shovill

      gtdbtkDatabase                  = "$params.databaseDirectory/gtdb"
      gtdbtkClassify                  = true
      gtdbtkDenovo                    = true
      gtdbtkDenovoOutgroup            = "p__Mycobacteria"

    }
  }

  resources {
    threads {
      fastp                 = 8
      scrubby               = 8
      vircov                = 8
      vircovRemap           = 2
      vircovParallel        = 4
      cerebro               = 2
      kraken2               = 8
      bracken               = 1
      minimap2              = 4
      metabat2              = 4
      metabuli              = 8
      sylph                 = 8
      kmcp                  = 8
      metaspades            = 8
      megahit               = 8 
      concoct               = 4
    }
    memory {
      metaspades            = "16 GB"
      megahit               = "16 GB"
      metabuli              = "16 GB"
      kmcp                  = "16 GB"
    }

    conda {
      bracken               = "$baseDir/lib/resources/conda/bracken.yml"
      cerebro               = "$baseDir/lib/resources/conda/cerebro.yml"
      concoct               = "$baseDir/lib/resources/conda/concoct.yml"
      fastp                 = "$baseDir/lib/resources/conda/fastp.yml"
      kmcp                  = "$baseDir/lib/resources/conda/kmcp.yml"
      kraken2               = "$baseDir/lib/resources/conda/kraken2.yml"
      megahit               = "$baseDir/lib/resources/conda/megahit.yml"
      metabuli              = "$baseDir/lib/resources/conda/metabuli.yml"
      metaspades            = "$baseDir/lib/resources/conda/metaspades.yml"
      minimap2              = "$baseDir/lib/resources/conda/minimap2.yml"
      metabat2              = "$baseDir/lib/resources/conda/metabat2.yml"
      scrubby               = "$baseDir/lib/resources/conda/scrubby.yml"
      sylph                 = "$baseDir/lib/resources/conda/sylph.yml"
      vircov                = "$baseDir/lib/resources/conda/vircov.yml"
      virscrub              = "$baseDir/lib/resources/conda/virscrub.yml"
    }
  }
}

profiles {

  conda {
    conda.enabled = true
  }
  mamba {
    conda.enabled = true
    conda.useMamba = true
  }

  twist {
    params.qualityControl.readDeduplication   = false  
    params.qualityControl.internalControls    = false 
    params.qualityControl.syntheticControls   = false 
    params.qualityControl.backgroundDepletion = false 
  }

  cns {
    params.qualityControl.readDeduplication   = true  
    params.qualityControl.adapterForward      = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA"
    params.qualityControl.adapterReverse      = "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT"
  }

  ont {

    params.qualityControl.readDeduplication   = false  
    params.qualityControl.internalControls    = false 
    params.qualityControl.syntheticControls   = false 
    params.qualityControl.backgroundDepletion = false 


  }

  bg {
      params.cerebroConfig.processQcBackgroundOnly         = true
      params.qualityControl.syntheticControls              = false
      params.qualityControl.internalControls               = false
      params.qualityControl.hostDepletion                  = false
      params.qualityControl.backgroundDepletion            = true
      params.qualityControl.backgroundDepletionAligner     = "bowtie2"
      params.qualityControl.backgroundDepletionIndex       = "$params.databaseDirectory/qc"
      params.qualityControl.backgroundDepletionReference   = "$params.databaseDirectory/qc"
  }

  micro {
      executor.$local.cpus = 8
      executor.$local.memory = '32 GB'
  }
  tiny {
      executor.$local.cpus = 16
      executor.$local.memory = '64 GB'
  }
  mini {
      executor.$local.cpus = 32
      executor.$local.memory = '128 GB'
  }
  small {
      executor.$local.cpus = 64
      executor.$local.memory = '512 GB'
  }
  medium {
      executor.$local.cpus = 128
      executor.$local.memory = '512 GB'
  }
  large {
      executor.$local.cpus = 256
      executor.$local.memory = '1960 GB'
  }

  dgx {
    params.resources.threads.fastp                 = 16
    params.resources.threads.scrubby               = 16
    params.resources.threads.vircov                = 32
    params.resources.threads.vircovRemap           = 8
    params.resources.threads.vircovParallel        = 4
    params.resources.threads.cerebro               = 2
    params.resources.threads.kraken2               = 32
    params.resources.threads.bracken               = 1
    params.resources.threads.minimap2              = 16
    params.resources.threads.metabat2              = 16
    params.resources.threads.metabuli              = 32
    params.resources.threads.sylph                 = 32
    params.resources.threads.kmcp                  = 32
    params.resources.threads.metaspades            = 32
    params.resources.threads.megahit               = 32
    params.resources.threads.concoct               = 8
    params.resources.memory.metaspades             = "128 GB"
    params.resources.memory.megahit                = "128 GB"
    params.resources.memory.metabuli               = "128 GB"
    params.resources.memory.kmcp                   = "128 GB"
  }

}

process {

    withLabel: cerebro { 
      cpus = params.resources.threads.cerebro 
      conda = params.resources.conda.cerebro
    }
    withLabel: panviralVirusRecovery { 
      cpus = params.resources.threads.vircov 
      conda = params.resources.conda.vircov
    }
    withLabel: qualityReadScan { 
      cpus = params.resources.threads.cerebro 
      conda = params.resources.conda.cerebro
    }
    withLabel: qualityDeduplication { 
      cpus = params.resources.threads.cerebro 
      conda = params.resources.conda.cerebro
    }
    withLabel: qualityReadQuality { 
      cpus = params.resources.threads.fastp 
      conda = params.resources.conda.fastp
    }
    withLabel: qualityHostDepletion { 
      cpus = params.resources.threads.scrubby 
      conda = params.resources.conda.scrubby
    }
    withLabel: qualityInternalControls { 
      cpus = params.resources.threads.vircov 
      conda = params.resources.conda.virscrub
    }
    withLabel: qualitySyntheticControls { 
      cpus = params.resources.threads.vircov 
      conda = params.resources.conda.virscrub
    }
    withLabel: qualityBackgroundDepletion { 
      cpus = params.resources.threads.vircov 
      conda = params.resources.conda.virscrub
    }
    withLabel: pathogenProfileVircov {
      cpus = params.resources.threads.vircov 
      conda = params.resources.conda.vircov
    }
    withLabel: pathogenProfileKraken2 { 
      cpus = params.resources.threads.kraken2 
      conda = params.resources.conda.kraken2
    }
    withLabel: pathogenProfileBracken { 
      cpus = params.resources.threads.bracken 
      conda = params.resources.conda.bracken
    }
    withLabel: pathogenProfileSylph { 
      cpus = params.resources.threads.sylph 
      conda = params.resources.conda.sylph
    }
    withLabel: pathogenProfileKmcp { 
      cpus = params.resources.threads.kmcp 
      memory = params.resources.memory.kmcp 
      conda = params.resources.conda.kmcp
    }
    withLabel: pathogenProfileMetabuli {  
      cpus = params.resources.threads.metabuli
      memory = params.resources.memory.metabuli 
      conda = params.resources.conda.metabuli
    }
    withLabel: pathogenAssemblyMetaspades {  
      cpus = params.resources.threads.metaspades
      memory = params.resources.memory.metaspades 
      conda = params.resources.conda.metaspades
    }
    withLabel: pathogenAssemblyMegahit {  
      cpus = params.resources.threads.megahit
      memory = params.resources.memory.megahit 
      conda = params.resources.conda.megahit
    }
    withLabel: pathogenAssemblyContigCoverage {  
      cpus = params.resources.threads.minimap2
      conda = params.resources.conda.minimap2
    }
    withLabel: pathogenAssemblyConcoct {  
      cpus = params.resources.threads.concoct
      conda = params.resources.conda.concoct
    }
    withLabel: pathogenAssemblyMetabat2 {  
      cpus = params.resources.threads.metabat2
      conda = params.resources.conda.metabat2
    }
}