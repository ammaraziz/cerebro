params {

  fastqPaired                         = null                                  // glob string
  fastqNanopore                       = null                                  // glob string

  sampleSheet                         = null                                  // production sample sheet
  sampleSheetProduction               = false                                 // TODO: run_id, run_date, host columns required

  outputDirectory                     = "$params.executionDirectory/output"   // output directory
  databaseDirectory                   = "db"                                  // db base directory

  stageDirectory                      = "$params.executionDirectory/stage"    // cerebro-tower json staged sample 
  executionDirectory                  = "."                                   // cerebro-tower execution directory 

  monochrome                          = false

  cerebroProduction {
    
    apiToken                          = "CEREBRO_API_TOKEN"
    teamName                          = "CEREBRO_TEAM_NAME"
    towerIdentifier                   = "CEREBRO_TOWER_ID"
    
  }

  cerebroConfig {
    
    cipherTaxonomy                        = "$params.databaseDirectory"  // ncbi nodes format

    qualityControlBackgroundOnly          = false
    qualityControlDeduplicateBefore       = true
    qualityControlInternalControlsBefore  = true
    
    profileAlignmentSpeciesLca            = true
  }

  qualityControl {    
      
      readQuality                     = true
      readQualityMethod               = "fastp"  // fastp nanoq
      
      readDeduplication               = true
      readDeduplicationHead           = 75
      readDeduplicationDeterministic  = false
    
      adapterForward                  = null
      adapterReverse                  = null
    
      syntheticControls               = true
      syntheticControlsAligner        = "minimap2" // bowtie2 minimap2 minigraph strobealign
      syntheticControlsIndex          = "$params.databaseDirectory/ercc.fasta"
      syntheticControlsReference      = "$params.databaseDirectory/ercc.fasta"
    
      hostDepletion                   = true
      hostDepletionAligner            = "bowtie2"
      hostDepletionIndex              = "$params.databaseDirectory/chm13v2"
    
      internalControls                = true
      internalControlsAligner         = "minimap2"
      internalControlsIndex           = "$params.databaseDirectory/controls.fasta"
      internalControlsReference       = "$params.databaseDirectory/controls.fasta"
      
      backgroundDepletion             = false
      backgroundDepletionAligner      = "minimap2"
      backgroundDepletionIndex        = "$params.databaseDirectory/background.fasta"
      backgroundDepletionReference    = "$params.databaseDirectory/background.fasta"

  }

  panviralEnrichment {            

    virusAligner                      = "minimap2"
    virusIndex                        = "$params.databaseDirectory/virus.fasta"
    virusReference                    = "$params.databaseDirectory/virus.fasta"

    remapThreads                      = 2
    remapParallel                     = 4

  }

  bacterialEnrichment {            

    panelAligner                      = "minimap2"
    panelIndex                        = "$params.databaseDirectory/ngono_amr.fasta"
    panelExtraction                   = true  // extract aligned reads from background before further processing

    assembly                          = true
    assemblyMethod                    = "shovill-skesa"
    assemblyChecks                    = "checkm2"
    
    assemblyAnnotation                = true
    assemblyAnnotationMethod          = "bakta"
    
    assemblyMlst                      = true 
    assemblyMlstMethod                = "mlst"

    assemblyAmr                       = true
    assemblyAmrMethod                 = "ng-star abrit-amr"
    assemblyAmrIndex                  = "$params.databaseDirectory/ngono_ngstar.fasta"
    assemblyAmrSpecies                = "Neisseria gonorrhea"

    assemblyMgeContig                 = true
    assemblyMgeScan                   = true
    assemblyMgeScanWindow             = 2000
    assemblyMgeMethod                 = "genomad"
    assemblyGenomadDatabase           = "$params.databaseDirectory/genomad_db"


  }

  pathogenDetection {

    taxonomicProfile {

      aligner                         = "bowtie2"
      alignmentIndex                  = "$params.databaseDirectory/virus"
      alignmentReference              = "$params.databaseDirectory/virus.fasta.xz"
      alignmentRemapThreads           = 2
      alignmentRemapParallel          = 4

      alignmentSubset                 = false
      alignmentSubsetIndex            = "$params.databaseDirectory/virus.mash"
      alignmentSubsetMinHashes        = 1

      classifier                      = "kraken2 metabuli kmcp sylph"
      classifierReference             = "$params.databaseDirectory/virus.fasta.xz"
      classifierCoverageRemap         = true
      classifierBrackenProfile        = true
      classifierAbundanceCorrection   = true
      classifierGenomeLengths         = "$params.databaseDirectory/genome_lengths.tsv.xz"

      metabuliIndex                   = "$params.databaseDirectory/virus.metabuli"
      metabuliReference               = "$params.pathogenDetection.taxonomicProfile.classifierReference"
      
      krakenIndex                     = "$params.databaseDirectory/virus.kraken2"
      krakenReference                 = "$params.pathogenDetection.taxonomicProfile.classifierReference"
      krakenConfidence                = 0.1
      brackenReadLength               = 150
      brackenRank                     = "S"
      brackenMinReads                 = 3

      sylphIndex                      = "$params.databaseDirectory/virus.syldb"
      sylphReference                  = "$params.pathogenDetection.taxonomicProfile.classifierReference"
      sylphMetadata                   = "$params.databaseDirectory/virus.sylph.metadata.tsv.gz"

      kmcpIndex                       = "$params.databaseDirectory/virus.kmcp"
      kmcpReference                   = "$params.pathogenDetection.taxonomicProfile.classifierReference"
      kmcpMode                        = 0  // pathogen detection
      
    }

    metagenomeAssembly {              // low abundance configuration for csf

      assembler                       = "metaspades"  // metaspades megahit
      metaspadesKmer                  = ""
      megahitKmer                     = ""
      
      binner                          = "concoct"     // concoct semibin2
      
      remapCoverage                   = true
      remapCoverageAligner            = "minimap2"
      remapCoveragePolisher           = "cobra"

      contigProfile                   = true
      contigProfileMethod             = "sylph"
      contigProfileIndex              = "$params.databaseDirectory/cipher.syldb"
      contigProfileReference          = "$params.pathogenDetection.taxonomicProfile.classifierReference"

      ncbiDatabase                    = true
      ncbiDatabaseIndex               = "$params.databaseDirectory/nt_nr"
      ncbiDatabaseMethod              = "blastn diamond"
      ncbiDatabaseSpeciesLca          = true

      virusDetection                  = true
      viralDetectionMethod            = "genomad"
      viralDetectionIndex             = "$params.databaseDirectory/genomad_db"

      virusProfile                    = true
      virusProfileMethod              = "minimap2"
      virusProfileIndex               = "$params.databaseDirectory/img_vr.fasta.xz"
      virusProfileReference           = "$params.databaseDirectory/img_vr.fasta.xz"

      rdrpDetection                   = true
      rdrpDetectionMethod             = "rdrp-scan"
      rdrpLibraryTag                  = "RNA"
      rdrpDetectionIndex              = "$params.databaseDirectory/rdrp_db"

      remapThreads                    = 2
      remapParallel                   = 4

    }

    hostGenome {

      aneuploidyDetection            = true
      aneuploidyReferenceMethod      = "cnvkit"
      aneuploidyLibraryTag           = "DNA HOST"

      aneuploidyAligner              = "minimap2"
      aneuploidyIndex                = "$params.databaseDirectory/chm13v2.mmi"
      aneuploidyReferenceAlignment   = "$params.databaseDirectory/aneuploidy.bam"

      signatureBacterialViral        = true
      signatureLibraryTag            = "RNA HOST"
      signatureReferences            = "two_gene_signature.fasta"
      
    }

  }

  cultureIdentification {

    speciesTyping  {

      genomeAssembly                  = true  
      hybridAssembly                  = true         
      genomeAssembler                 = "hybracter"  // dragonflye, hybracter, shovill

      gtdbtkDatabase                  = "$params.databaseDirectory/gtdb"
      gtdbtkClassify                  = true
      gtdbtkDenovo                    = true
      gtdbtkDenovoOutgroup            = "p__Mycobacteria"

    }

  }

  resources {
    threads {
      fastp                 = 8
      scrubby               = 8
      vircov                = 8
      cerebro               = 1
      kraken2               = 8
      bracken               = 1
      metabuli              = 8
      sylph                 = 8
      kmcp                  = 8
    }
    memory {
      metabuli              = "36 GB"
    }
  }


}

profiles {

  cns {

    params.pathogenDetection.qualityControl.readDeduplication   = true  
    params.pathogenDetection.qualityControl.adapterForward      = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA"
    params.pathogenDetection.qualityControl.adapterReverse      = "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT"

  }


  bg {

      params.pathogenDetection.cerebroConfig.processQcBackgroundOnly         = true

      params.pathogenDetection.qualityControl.syntheticControls              = false
      params.pathogenDetection.qualityControl.internalControls               = false
      params.pathogenDetection.qualityControl.hostDepletion                  = false

      params.pathogenDetection.qualityControl.backgroundDepletion            = true
      params.pathogenDetection.qualityControl.backgroundDepletionAligner     = "bowtie2"
      params.pathogenDetection.qualityControl.backgroundDepletionIndex       = "$params.databaseDirectory/qc"
      params.pathogenDetection.qualityControl.backgroundDepletionReference   = "$params.databaseDirectory/qc"

  }

  micro {
      executor.$local.cpus = 8
      executor.$local.memory = '42 GB'
  }
  tiny {
      executor.$local.cpus = 16
      executor.$local.memory = '64 GB'
  }
  mini {
      executor.$local.cpus = 32
      executor.$local.memory = '128 GB'
  }
  small {
      executor.$local.cpus = 64
      executor.$local.memory = '512 GB'
  }
  medium {
      executor.$local.cpus = 128
      executor.$local.memory = '512 GB'
  }
  large {
      executor.$local.cpus = 256
      executor.$local.memory = '1960 GB'
  }

}

process {

    withLabel: cerebro { 
      cpus = params.resources.threads.cerebro 
    }
    withLabel: panviralVirusRecovery { 
      cpus = params.resources.threads.vircov 
    }
    withLabel: qualityReadScan { 
      cpus = 2 
    }
    withLabel: qualityDeduplication { 
      cpus = 2 
    }
    withLabel: qualityReadQuality { 
      cpus = params.resources.threads.fastp 
    }
    withLabel: qualityHostDepletion { 
      cpus = params.resources.threads.scrubby 
    }
    withLabel: qualityInternalControls { 
      cpus = params.resources.threads.vircov 
    }
    withLabel: qualitySyntheticControls { 
      cpus = params.resources.threads.vircov 
    }
    withLabel: qualityBackgroundDepletion { 
      cpus = params.resources.threads.vircov 
    }
    withLabel: pathogenProfileKraken2 { 
      cpus = params.resources.threads.kraken2 
      }
    withLabel: pathogenProfileBracken { 
      cpus = params.resources.threads.bracken 
      }
    withLabel: pathogenProfileSylph { 
      cpus = params.resources.threads.sylph 
      }
    withLabel: pathogenProfileKmcp { 
      cpus = params.resources.threads.kmcp 
    }
    withLabel: pathogenProfileMetabuli {  
      cpus = params.resources.threads.metabuli
      memory = params.resources.memory.metabuli 
    }

}