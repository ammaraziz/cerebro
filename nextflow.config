params {

  fastq                               = null  // glob string, preference
  sampleSheet                         = null  // cerebro production sample sheet

  databaseDirectory                   = "db"  // db base directory

  executionDirectory                  = "."   // cerebro-tower execution directory 

  outputDirectory                     = "$params.executionDirectory/output"  // output cerebro-tower
  stageDirectory                      = "$params.executionDirectory/stage"   // json staged sample cerebro-tower

  panviralEnrichment {            

    hostDepletion                     = true
    hostAligner                       = "bowtie2"
    hostIndex                         = "$params.databaseDirectory/chm13v2"

    virusAligner                      = "minimap2"
    virusIndex                        = "$params.databaseDirectory/virus.fasta"
    virusReference                    = "$params.databaseDirectory/virus.fasta"

    internalControls                  = true
    controlAligner                    = "minimap2"
    controlIndex                      = "$params.databaseDirectory/phage.fasta"
    controlReference                  = "$params.databaseDirectory/phage.fasta"

    adapterForward                    = null
    adapterReverse                    = null

    remapThreads                      = 2
    remapParallel                     = 4

  }

  pathogenDetection {

    cipherDatabase                    = true
    taxonomy                          = "$params.databaseDirectory"  // ncbi nodes format
    
    qualityControl {    
      
      readQuality                     = true
      readQualityMethod               = "fastp"  // fastp nanoq
      
      readDeduplication               = true  
      readDeduplicationHead           = 75
      readDeduplicationUmi            = "auto"
      readDeduplicationDeterministic  = false
    
      adapterForward                  = null
      adapterReverse                  = null
    
      syntheticControls               = true
      syntheticControlsAligner        = "minimap2" // bowtie2 minimap2 minigraph strobealign
      syntheticControlsIndex          = "$params.databaseDirectory/ercc.fasta"
      syntheticControlsReference      = "$params.databaseDirectory/ercc.fasta"
    
      hostDepletion                   = true
      hostDepletionAligner            = "bowtie2"  
      hostDepletionIndex              = "$params.databaseDirectory/chm13v2"
    
      internalControls                = true
      internalControlsAligner         = "minimap2"
      internalControlsIndex           = "$params.databaseDirectory/controls.fasta"
      internalControlsReference       = "$params.databaseDirectory/controls.fasta"
      
      backgroundDepletion             = true
      backgroundDepletionAligner      = "minimap2"
      backgroundDepletionIndex        = "$params.databaseDirectory/phage_plasmid_univec_rrna.fasta"
      backgroundDepletionReference    = "$params.databaseDirectory/phage_plasmid_univec_rrna.fasta"

    }

    taxonomicProfile {

      aligner                         = "bowtie2"
      alignmentIndex                  = "$params.databaseDirectory/cipher_db.fasta" 
      alignmentReference              = "$params.databaseDirectory/cipher_db.fasta.xz"

      classifier                      = "kraken2"  // kraken2 metabuli kmcp
      classifierBrackenProfile        = true
      classifierCoverageRemap         = true
      classifierAbundanceCorrection   = true
      classifierGenomeLengths         = "$params.databaseDirectory/genome_length.tsv.xz"

      metabuliIndex                   = "$params.databaseDirectory/cipher_db.mb"
      metabuliReference               = "$params.databaseDirectory/cipher_db.fasta.xz"
      krakenIndex                     = "$params.databaseDirectory/cipher_db.k2"
      krakenReference                 = "$params.databaseDirectory/cipher_db.fasta.xz"
      kmcpIndex                       = "$params.databaseDirectory/cipher_db.km"
      kmcpReference                   = "$params.databaseDirectory/cipher_db.fasta.xz"

      remapThreads                    = 2
      remapParallel                   = 4

    }

    metagenomeAssembly {              // low abundance configuration for meta-gp cns

      assembler                       = "metaspades" // metaspades megahit
      binner                          = "concoct"  

      remapCoverage                   = true
      remapCoverageAligner            = "minimap2"

      ncbiDatabase                    = true
      ncbiDatabaseIndex               = "$params.databaseDirectory/nt_nr"
      ncbiDatabaseMethod              = "blastn diamond "
      ncbiDatabaseSpeciesLca          = true

      viralDetection                  = true
      viralDetectionMethod            = "genomad"
      viralDetectionIndex             = "$params.databaseDirectory/genomad_db"

      rdrpDetection                   = true
      rdrpDetectionMethod             = "rdrp"
      rdrpDetectionIndex              = "$params.databaseDirectory/rdrp_db"

      phageDetection                  = true
      phageAligner                    = "minimap2"
      phageIndex                      = "$params.databaseDirectory/controls.fasta"
      phageReference                  = "$params.databaseDirectory/controls.fasta"

      remapThreads                    = 2
      remapParallel                   = 4

    }

    hostGenome {

      aneuploidyDetection            = true
      aneuploidyReferenceMethod      = "cnvkit"
      
      aneuploidyAligner              = "minimap2"
      aneuploidyIndex                = "$params.databaseDirectory/chm13v2_sr.mmi"
      aneuploidyReferenceAlignment   = "$params.databaseDirectory/aneuploidy_ref.bam"

    }

  }
  
  threads {
    fastp                 = 8
    scrubby               = 8
    vircov                = 8
  }



}

profiles {

  cns_assay {

    params.pathogenDetection.qualityControl.adapterForward  = ""
    params.pathogenDetection.qualityControl.adapterReverse  = ""
    params.pathogenDetection.qualityControl.deduplication   = true
    params.pathogenDetection.qualityControl.umiLength       = 12


  }



}

process {

    withLabel: vircov_scrubby { cpus = params.threads.vircov }
    withLabel: vircov { cpus = params.threads.vircov }
    withLabel: scrubby { cpus = params.threads.scrubby } 
    withLabel: fastp { cpus = params.threads.fastp }

}